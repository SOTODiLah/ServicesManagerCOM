// ServicesManagerCOM.idl: источник языка IDL для ServicesManagerCOM
//

// Этот файл будет обработан средством MIDL для
// создание библиотеки типов ($handlersafeidlname$.tlb) и кода маршалирования.

import "oaidl.idl";
import "ocidl.idl";

[
	uuid(a871ac02-f7c1-4a9e-b060-95645d1d5826),
	version(1.0),
]
library ServicesManagerCOMLib
{
	importlib("stdole2.tlb");

	typedef
	[
		uuid(AD30083A-A83A-4DE3-9C0D-A0B2969A8436)
	]
	enum EServiceType
	{         
		NonType = 0x0,
		KernelDriver = 0x00000001,
		FileSystemDriver = 0x00000002,
		Adapter = 0x00000004,
		RecognizerDriver = 0x00000008,
		Win32OwnProcess = 0x00000010,
		Win32ShareProcess = 0x00000020,
		User = 0x00000040,
		UserInstance = 0x00000080,
		InteractiveDriver = 0x00000100,
		PKG = 0x00000200,
		UserShare = User | Win32ShareProcess,
		UserOwn = User | Win32OwnProcess,
		Driver = KernelDriver | FileSystemDriver | RecognizerDriver,
		Win32 = Win32OwnProcess | Win32ShareProcess,
		All = Win32 | Adapter | Driver | InteractiveDriver | User | UserInstance | PKG
	} EServiceType;

	typedef
	[
		uuid(1DB2ED0E-C0B5-4FF5-91DB-57E15F53A6A3)
	]
	enum EServiceStatus
	{
		NonStatus = 0x00000000,
		Stopped = 0x00000001,
		Starting = 0x00000002,
		Stopping = 0x00000003,
		Running = 0x00000004,
		Continuing = 0x00000005,
		Pausing = 0x00000006,
		Paused = 0x00000007
	} EServiceStatus;

	[
		object,
		uuid(145377a8-8fcb-4530-8816-65e00b95798e),
		dual,
		nonextensible,
		pointer_default(unique)
	]
	interface IServiceManager : IDispatch
	{
		[id(0), helpstring("Initializes data of the service")] HRESULT Init([in] BSTR bstrName);
		[id(1), helpstring("Returns a name the service")] HRESULT GetName([out, retval] BSTR* pResult);
		[id(2), helpstring("Returns a display name the service")] HRESULT GetFullName([out, retval] BSTR * pResult);
		[id(3), helpstring("Returns a description the service")] HRESULT GetDescription([out, retval] BSTR* pResult);
		[id(4), helpstring("Returns a status the service")] HRESULT GetStatus([out, retval] EServiceStatus* pResult);
		[id(5), helpstring("Returns a status the service")] HRESULT GetType([out, retval] EServiceType* pResult);
		[id(6), helpstring("Returns boolean can the service be paused and continued")] HRESULT CanPauseContinue([out, retval] boolean* pResult);
		[id(7), helpstring("Returns boolean can the service be stopped")] HRESULT CanStop([out, retval] boolean* pResult);
		[id(9), helpstring("Waiting new status for the service")] HRESULT WaitForStatus([in] EServiceStatus, [in] ULONG, [out, retval] boolean* pResult);
		[id(10), helpstring("Refresh a data of the service")] HRESULT Refresh();
		[id(11), helpstring("Attempt to start the service")] HRESULT Start([out, retval] boolean* bResult);
		[id(12), helpstring("Attempt to stop the service")] HRESULT Stop([out, retval] boolean* bResult);
		[id(13), helpstring("Attempt to pause the service")] HRESULT Pause([out, retval] boolean* bResult);
		[id(14), helpstring("Attempt to continue the service")] HRESULT Continue([out, retval] boolean* bResult);
	};

	[
		uuid(66d7fbab-8802-4343-a08b-ddcf06693a5c)
	]
	coclass ServiceManager
	{
		[default] interface IServiceManager;
	};

	[
		object,
		uuid(d4572fb8-0e28-4c71-a7e5-eb72dd06d0df),
		dual,
		nonextensible,
		pointer_default(unique)
	]
	interface IFactoryServiceManager : IDispatch
	{
		[id(1), helpstring("Returns an array of service managers")] HRESULT GetAllServiceManagers([out, retval] SAFEARRAY(IServiceManager*)* pReturn);
		[id(2), helpstring("Returns an array of defined type service managers")] HRESULT GetServiceManagersByType([in] EServiceType, [out, retval] SAFEARRAY(IServiceManager*)* pReturn);
		[id(3), helpstring("Returns an array of defined status service managers")] HRESULT GetServiceManagersByStatus([in] EServiceStatus, [out, retval] SAFEARRAY(IServiceManager*)* pReturn);
	};

	[
		uuid(39f296b9-4714-4a9b-a0cf-8188df465ce1)
	]
	coclass FactoryServiceManager
	{
		[default] interface IFactoryServiceManager;
	};
};

import "shobjidl.idl";
import "shobjidl.idl";
